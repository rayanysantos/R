library(duckdb)

##########################
# Conectando com o banco #
##########################

con <- DBI::dbConnect(drv = duckdb::duckdb(), 
                      dbdir = "Caminho_arquivo.duckdb", 
                      read_only = FALSE )

#######################
# Vendo nomes tabelas #
#######################

dbGetQuery(con, 'SELECT * FROM information_schema.tables')
res <- dbGetQuery(con, 'SELECT * FROM NOME_TABELA
                  LIMIT 5')

dbDisconnect(con, shutdown=TRUE)

#############################################
# Extrair dados sem mandar tabela pro banco #
#############################################

con <- DBI::dbConnect(drv = duckdb::duckdb(), 
                      dbdir = "Caminho_arquivo.duckdb", 
                      read_only = FALSE )

cruzamento_MeD <- tbl(con, "tabela") |> 
  select(var1, var2, var3, var4, var5 ) |>
  filter(var1 %in% VETOR) |>
  collect()

str(cruzamento_MeD)

###########################################
# Extrair dados mandando tabela pro banco #
###########################################

con <- DBI::dbConnect(drv = duckdb::duckdb(), 
                      dbdir = "Caminho_arquivo.duckdb", 
                      read_only = FALSE )

# Unicos e um data frame com os valores que se quer extrair
dbWriteTable(conn=con, name="PNP", value=unicos)

#2262556
res <- dbGetQuery(con, 'SELECT a.*, b.* FROM PNP as a
                  left join tab as b
                  on a."Nu.Documento" = b."Documento"')

dbDisconnect(con, shutdown=TRUE)

head(res)
